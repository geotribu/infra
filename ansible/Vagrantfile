# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # https://portal.cloud.hashicorp.com/vagrant/discover/cloud-image/ubuntu-24.04
  config.vm.box = "cloud-image/ubuntu-24.04"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = true
  config.vm.box_version = "20250704.0.0"

  config.vm.define "vm_geotributest"
  # Allow hosts to reach this vm by hostname
  # Note: libnss-mdns must be installed on host
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.hostname = 'geotribu.local'

  config.vm.network "private_network", type: "dhcp"

  # For libvirt provider
  #config.vagrant.plugins = "vagrant-libvirt"
  config.vm.provider :libvirt do |libvirt|
    libvirt.cpus = 2
    libvirt.driver = "kvm"
    libvirt.memory = 4096
    libvirt.uri = 'qemu:///system'

    #libvirt.socket = '/var/run/libvirt/libvirt-sock'
    #libvirt.host = 'localhost'
    #libvirt.username = ''
    #libvirt.password = ''
    #libvirt.id_ssh_key_file = "$HOME/.ssh/id_rsa"
  end

  
  # Disable the new default behavior introduced in Vagrant 1.7, to
  # ensure that all Vagrant machines will use the same SSH key pair.
  # See https://github.com/mitchellh/vagrant/issues/5005
  config.ssh.insert_key = false
  
  config.vm.provision 'ansible', type: 'ansible' do |ansible|
    ansible.compatibility_mode = "2.0"
    ansible.groups = {
      "geotributest" => ["vm_geotributest"],
    }
    ansible.host_key_checking = false
    ansible.limit          = "geotributest"
    ansible.extra_vars = {
      geotribu_set_password: true,
      hostname: config.vm.hostname,
      letsencrypt_enabled: false
    }
    ansible.playbook = "playbook.yml"
    ansible.raw_arguments = Shellwords.shellsplit(ENV['ANSIBLE_ARGS']) if ENV['ANSIBLE_ARGS']
    ansible.verbose = 'v'
    
  end

end
