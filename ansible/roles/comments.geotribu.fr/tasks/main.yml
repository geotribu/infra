---
- name: Installation des paquets liés à Isso
  ansible.builtin.apt:
    name:
      - apache2
      - apache2-utils
      - build-essential
      - libapache2-mod-wsgi-py3
      - libexpat1
      - python3-dev
      - python3-venv
      - software-properties-common
      - sqlite3
    state: present
  become: true

- name: Active les modules Apache
  community.general.apache2_module:
    name: "{{ item }}"
    state: present
  loop:
    - deflate
    - headers
    - http2
  become: true

# Installe Isso
- name: "Crée le dossier de destination pour les commentaires (Isso) - {{ comments_path }}"
  ansible.builtin.file:
    path: "{{ comments_path }}"
    state: directory
    owner: geotribu
    mode: "0755"
  become: true

- name: Copie les dépendances à Isso
  become: true
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ comments_path }}"
    owner: geotribu
    group: www-data
    mode: preserve
  loop:
    - files/webhook_template_slack.json
    - files/requirements.txt

- name: S’assure que le dossier de commentaires est accessible en écriture
  ansible.builtin.file:
    path: "{{ comments_path }}"
    state: directory
    owner: geotribu
    group: www-data
    mode: "0775"
    recurse: true
  become: true

- name: Copie le script WSGI pour exposer Isso sur Apache
  ansible.builtin.template:
    src: templates/isso_wsgi.py.j2
    dest: "{{ [comments_path, 'isso_wsgi.py'] | path_join }}"
    owner: geotribu
    group: www-data
    mode: "0644"
  become: true

- name: Copie le fichier de configuration d'Isso dans {{ comments_path }}
  ansible.builtin.template:
    src: "templates/isso-prod.cfg.j2"
    dest: "{{ [comments_path, 'isso-prod.cfg'] | path_join }}"
    owner: geotribu
    group: www-data
    mode: "0640"
  become: true

- name: Crée un environnement virtuel et installe les paquets de base
  ansible.builtin.pip:
    chdir: "{{ comments_path }}"
    name:
      - pip
      - setuptools
      - wheel
    state: present
    virtualenv: "{{ comments_path }}.venv"
    virtualenv_command: /usr/bin/python3 -m venv
  become_user: geotribu
  become: true

- name: Installe les paquets Python pour Isso
  ansible.builtin.pip:
    chdir: "{{ comments_path }}"
    requirements: requirements.txt
    virtualenv: "{{ comments_path }}.venv"
  become_user: geotribu
  become: true

- name: Recursively change ownership of a directory
  ansible.builtin.file:
    path: "{{ comments_path }}"
    state: directory
    recurse: true
    owner: geotribu
    group: www-data
    mode: "0755"
  become: true

- name: Copie la configuration Apache2 pour les commentaires
  ansible.builtin.template:
    src: "templates/apache_comments.conf.j2"
    dest: "/etc/apache2/sites-available/{{ geotribu_www }}-{{ comments_subdomain }}.conf"
    mode: preserve
  become: true

- name: Active le site
  ansible.builtin.command: "/usr/sbin/a2ensite {{ geotribu_www }}-{{ comments_subdomain }}"
  become: true
  changed_when: true

- name: Désactive le site par défaut d'Apache
  become: true
  ansible.builtin.command: "/usr/sbin/a2dissite 000-default.conf"
  notify: Restart Apache
  changed_when: true

- name: "Check si le certificat existe déjà"
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ comments_subdomain }}.{{ hostname }}/fullchain.pem"
  become: true
  register: cert_comments

- name: Crée un certificat SSL avec Let's Encrypt (prod) pour {{ comments_subdomain }}
  ansible.builtin.command: >-
    certbot --apache
    --noninteractive
    -d {{ comments_subdomain }}.{{ hostname }}
    --email {{ geotribu_cert_mail }}
    --agree-tos
  become: true
  register: cert_created
  notify: Reload Apache
  changed_when: true
  when: letsencrypt_enabled | default(false)

- name: "Décommente les lignes WSGI qui posent problème au certbot"
  ansible.builtin.replace:
    path: "/etc/apache2/sites-available/{{ geotribu_www }}-{{ comments_subdomain }}-le-ssl.conf"
    regexp: "^#+(.*WSGI.*)"
    replace: '\1'
  when: letsencrypt_enabled | default(false)

- name: Certificat autosigné - Génère une clé privée si elle n’existe pas déjà
  community.crypto.openssl_privatekey:
    path: /etc/ssl/private/{{ comments_subdomain }}.key
    size: 4096
    type: RSA
  become: true
  when: not letsencrypt_enabled | default(false)

- name: Certificat autosigné - certificate signing request (CSR) for self-signed certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: /etc/ssl/private/{{ comments_subdomain }}.key
    common_name: cdn_geotribu_local
    organization_name: Geotribu
    subject_alt_name:
      - "DNS:{{ hostname }}"
      - "DNS:{{ comments_subdomain }}.{{ hostname }}"
  become: true
  register: csr
  when: not letsencrypt_enabled | default(false)

- name: Certificat auto-signé - Génère le certificat pour {{ comments_subdomain }}
  community.crypto.x509_certificate:
    csr_content: "{{ csr.csr }}"
    path: "/etc/ssl/certs/{{ comments_subdomain }}.crt"
    privatekey_path: /etc/ssl/private/{{ comments_subdomain }}.key
    provider: selfsigned
  become: true
  when: not letsencrypt_enabled | default(false)
